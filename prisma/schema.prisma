// This is your Prisma schema file,
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  READ_ONLY
}

enum ProjectRoleTypes {
  ADMIN
  USER
  READ_ONLY
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  projects              Project[]              @relation("ProjectMembers")
  leadingProjects       Project[]              @relation("ProjectLeaders")
  projectRoles          ProjectRole[]
  defaultProjectId      String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Project               Project?               @relation(fields: [projectId], references: [id])
  projectId             String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  userId  String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id              String        @id @default(cuid())
  name            String
  image           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  projectLeaderId String
  projectLeader   User          @relation("ProjectLeaders", fields: [projectLeaderId], references: [id])
  members         User[]        @relation("ProjectMembers")
  projectRoles    ProjectRole[]
  User            User[]
}

model ProjectRole {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  project   Project          @relation(fields: [projectId], references: [id])
  projectId String
  role      ProjectRoleTypes
}
